class Object
  def >> _
    _.send *self
  end
end

$__ =  $$ /   $$ #  1
_   = $__ +  $__ #  2
__  = $__ +    _ #  3
$_  =   _ +    _ #  4
@_  = $__ +   $_ #  5
$-_ =   _ **  @_ # 32
$___=   _ *  $-_ # 64
@__ = $-_ + $___ # 96

S_ancestors = ('' << @__ + $__ << @__ + _ * (_ + @_) << @__ + __ << @__ + @_ << @__ + _ * __ * __ + $__ << @__ + _ * _ * @_ << @__ + __ * @_ << @__ + _ * __ * __ << @__ + _ * __ * __ + $__)
S_class = ('' << @__ + __ << @__ + __ * $_ << @__ + $__ << @__ + _ * __ * __ + $__ << @__ + _ * __ * __ + $__)
C_Object = (S_ancestors >> (S_class >> []))[_]

S_require = ('' << @__ + _ * __ * __ << @__ + @_ << @__ + $_ * $_ + $__ << @__ + __ * (_ + @_) << @__ + __ * __ << @__ + _ * __ * __ << @__ + @_)
S_sinatra = ('' << @__ + _ * __ * __ + $__ << @__ + __ * __ << @__ + _ * (_ + @_) << @__ + $__ << @__ + _ * _ * @_ << @__ + _ * __ * __ << @__ + $__)
S_json = ('' << @__ + _ * @_ << @__ + _ * __ * __ + $__ << @__ + __ * @_ << @__ + _ * (_ + @_))
S_hurch = ('' << @__ + _ * $_ << @__ + __ * (_ + @_) << @__ + _ * __ * __ << @__ + __ << @__ + _ * $_)
S_church = ('' <<  @__ + __ << S_hurch)
S_Church = ('' << $___ + __ << S_hurch)

[S_require, S_sinatra] >> C_Object
[S_require, S_json] >> C_Object
[S_require, S_church] >> C_Object

S_include = ('' << @__ + __ * __ << @__ + _ * (_ + @_) << @__ + __ << @__ + __ * $_ << @__ + __ * (_ + @_) << @__ + $_ << @__ + @_)
S_const_get = ('' << @__ + __ << @__ + __ * @_ << @__ + _ * (_ + @_) << @__ + _ * __ * __ + $__ << @__ + _ * _ * @_ << @__ - $__ << @__ + _ * __ + $__ << @__ + @_ << @__ + _ * _ * @_)

[S_include, [S_const_get, S_Church] >> C_Object] >> C_Object

S_get = ('' << @__ + _ * __ + $__ << @__ + @_ << @__ + _ * _ * @_)
S_haml = ('' << @__ + _ * $_ << @__ + $__ << @__ + __ * $_ + $__ << @__ + __ * $_)
S_to_sym = ('' << @__ + _ * _ * @_ << @__ + __ * @_ << @__ - $__ << @__ + _ * __ * __ + $__ << @__ + @_ * @_ << @__ + __ * $_ + $__)
S_index = ('' << @__ + __ * __ << @__ + _ * (_ + @_) << @__ + $_ << @__ + @_ << @__ + ($-_ - _ * $_))
self.send(S_get, '/', &-> { [S_haml, S_to_sym >> S_index] >> self })

S_post = ('' << @__ + $_ * $_ << @__ + __ * @_ << @__ + _ * __ * __ + $__ << @__ + _ * _ * @_)
S_generate = ('' << $-_ + __ * @_ << @__ + _ * __ + $__ << @__ + @_ << @__ + _ * (_ + @_) << @__ + @_ << @__ + _ * __ * __ << @__ + $__ << @__ + _ * _ * @_ << @__ + @_)

S_1 = ('' << $-_ + $_ * $_ + $__)
S_2 = ('' << $-_ + _ * __ * __)
S_3 = ('' << $-_ + _ * __ * __ + $__)
S_4 = ('' << $-_ + _ * _ * @_)
S_5 = ('' << $-_ + __ * (_ + @_))
S_32 = ('' << $-_ + _ * __ * __ + $__ << $-_ + _ * __ * __)
S_64 = ('' << $-_ + ($-_ - _ * @_) << $-_ + _ * _ * @_)
S_96 = ('' << $-_ + @_ * @_ << $-_ + ($-_ - _ * @_))

self.send(S_post, S_generate, &-> {
  OUTPUT = "\
$__ =  $$ /   $$ # " << S_1 << "
_   = $__ +  $__ # " << S_2 << "
__  = $__ +    _ # " << S_3 << "
$_  =   _ +    _ # " << S_4 << "
@_  = $__ +   $_ # " << S_5 << "
$-_ =   _ **  @_ # " << S_32 << "
$___=   _ *  $-_ # " << S_64 << "
@__ = $-_ + $___ # " << S_96 << "

$> << ('' <<
"

  VARS = {S_96=>'@__', S_64=>'$___', S_32=>'$-_', S_5=>'@_', S_4=>'$_', S_3=>'__', S_2=>'_', S_1=>'$__'}
  EXPRS = ["$__ - $__", "$__", "_", "__", "$_", "@_", "_ * __", "_ * __ + $__", "_ * $_", "__ * __", "_ * @_", "_ * @_ + $__", "__ * $_", "__ * $_ + $__", "_ * (_ + @_)", "__ * @_", "$_ * $_", "$_ * $_ + $__", "_ * __ * __", "_ * __ * __ + $__", "_ * _ * @_", "__ * (_ + @_)", "$-_ - _ * @_", "$-_ - __ * __", "$-_ - _ * $_", "@_ * @_", "@_ * @_ + $__", "$-_ - @_", "$-_ - $_", "$-_ - __", "$-_ - _", "$-_ - $__", "$-_", "$-_ + $__", "$-_ + _", "$-_ + __", "$-_ + $_", "$-_ + @_", "$-_ + _ * __", "$-_ + _ * __ + $__", "$-_ + _ * $_", "$-_ + __ * __", "$-_ + _ * @_", "$-_ + _ * @_ + $__", "$-_ + __ * $_", "$-_ + __ * $_ + $__", "$-_ + _ * (_ + @_)", "$-_ + __ * @_", "$-_ + $_ * $_", "$-_ + $_ * $_ + $__", "$-_ + _ * __ * __", "$-_ + _ * __ * __ + $__", "$-_ + _ * _ * @_", "$-_ + __ * (_ + @_)", "$-_ + ($-_ - _ * @_)", "$-_ + ($-_ - __ * __)", "$-_ + ($-_ - _ * $_)", "$-_ + @_ * @_", "$-_ + @_ * @_ + $__", "$___ - @_", "$___ - $_", "$___ - __", "$___ - _", "$___ - $__", "$___", "$___ + $__", "$___ + _", "$___ + __", "$___ + $_", "$___ + @_", "$___ + _ * __", "$___ + _ * __ + $__", "$___ + _ * $_", "$___ + __ * __", "$___ + _ * @_", "$___ + _ * @_ + $__", "$___ + __ * $_", "$___ + __ * $_ + $__", "$___ + _ * (_ + @_)", "$___ + __ * @_", "$___ + $_ * $_", "$___ + $_ * $_ + $__", "$___ + _ * __ * __", "$___ + _ * __ * __ + $__", "$___ + _ * _ * @_", "$___ + __ * (_ + @_)", "$___ + ($-_ - _ * @_)", "$___ + ($-_ - __ * __)", "$___ + ($-_ - _ * $_)", "$___ + @_ * @_", "$___ + @_ * @_ + $__", "@__ - @_", "@__ - $_", "@__ - __", "@__ - _", "@__ - $__", "@__", "@__ + $__", "@__ + _", "@__ + __", "@__ + $_", "@__ + @_", "@__ + _ * __", "@__ + _ * __ + $__", "@__ + _ * $_", "@__ + __ * __", "@__ + _ * @_", "@__ + _ * @_ + $__", "@__ + __ * $_", "@__ + __ * $_ + $__", "@__ + _ * (_ + @_)", "@__ + __ * @_", "@__ + $_ * $_", "@__ + $_ * $_ + $__", "@__ + _ * __ * __", "@__ + _ * __ * __ + $__", "@__ + _ * _ * @_", "@__ + __ * (_ + @_)", "@__ + ($-_ - _ * @_)", "@__ + ($-_ - __ * __)", "@__ + ($-_ - _ * $_)", "@__ + @_ * @_", "@__ + @_ * @_ + $__", "@__ + @_ * @_ + _", "@__ + $-_ - $_", "@__ + $-_ - __", "@__ + $-_ - _", "@__ + $-_ - $__"]

  @__ = $-_ + $___ # 96 TODO: No idea why this became nil here.

  S_params = ('' << @__ + $_ * $_ << @__ + $__ << @__ + _ * __ * __ << @__ + $__ << @__ + __ * $_ + $__ << @__ + _ * __ * __ + $__)
  S_msg = ('' << @__ + __ * $_ + $__ << @__ + _ * __ * __ + $__ << @__ + _ * __ + $__)
  ORDS  = MAP[CHARS[(S_params >> self)[S_to_sym >> S_msg]], &ORD]

  @_ = $__ + $_ # 5 TODO: No idea why this became nil here either.
  S_fmt = ('' << $-_ << $-_ << $-_ + @_ << $-_ + __ * $_ + $__ << $-_ + _ * __ * __ << $-_ + ($-_ - __ * __) << @__ + _ * __ * __ + $__)
  S_inspect = ('' << @__ + __ * __ << @__ + _ * (_ + @_) << @__ + _ * __ * __ + $__ << @__ + $_ * $_ << @__ + @_ << @__ + __ << @__ + _ * _ * @_)
  EACH[ORDS, &-> _ {
    OUTPUT << S_fmt % (EXPRS[_] + ' <<') + "# #{S_inspect >> CHR[_]}\n"
  }]

  OUTPUT << "  _ * @_)"

  S_s = ('' << @__ - $_ << @__ + _ * __ * __ + $__ << $-_ + _ * @_ + $__)
  S_d = ('' << @__ - $_ << @__ + $_ << $-_ + _ * @_ + $__)

  S_Regexp = ('' << $___ + _ * __ * __ << @__ + @_ << @__ + _ * __ + $__ << @__ + @_ << @__ + ($-_ - _ * $_) << @__ + $_ * $_)
  C_Regexp = [S_const_get, S_Regexp] >> C_Object
  S_new = ('' << @__ + _ * (_ + @_) << @__ + @_ << @__ + ($-_ - __ * __))
  S_gsub = ('' << @__ + _ * __ + $__ << @__ + _ * __ * __ + $__ << @__ + __ * (_ + @_) << @__ + _)

    ([S_gsub, /#.+/, ''] >> ([S_gsub, [S_new, '#' << S_s << S_d] >> C_Regexp, ';'] >> OUTPUT))
  SMOOSH.gsub!(/\s+/, '')

  S_content_type = ('' << @__ + __ << @__ + __ * @_ << @__ + _ * (_ + @_) << @__ + _ * _ * @_ << @__ + @_ << @__ + _ * (_ + @_) << @__ + _ * _ * @_ << @__ - $__ << @__ + _ * _ * @_ << @__ + @_ * @_ << @__ + $_ * $_ << @__ + @_)
  S_application_json = ('' << @__ + $__ << @__ + $_ * $_ << @__ + $_ * $_ << @__ + __ * $_ << @__ + __ * __ << @__ + __ << @__ + $__ << @__ + _ * _ * @_ << @__ + __ * __ << @__ + __ * @_ << @__ + _ * (_ + @_) << $-_ + __ * @_ << @__ + _ * @_ << @__ + _ * __ * __ + $__ << @__ + __ * @_ << @__ + _ * (_ + @_))
  S_to_json = ('' << @__ + _ * _ * @_ << @__ + __ * @_ << @__ - $__ << @__ + _ * @_ << @__ + _ * __ * __ + $__ << @__ + __ * @_ << @__ + _ * (_ + @_))
  S_output = ('' << @__ + __ * @_ << @__ + __ * (_ + @_) << @__ + _ * _ * @_ << @__ + $_ * $_ << @__ + __ * (_ + @_) << @__ + _ * _ * @_)
  S_smoosh = ('' << @__ + _ * __ * __ + $__ << @__ + __ * $_ + $__ << @__ + __ * @_ << @__ + __ * @_ << @__ + _ * __ * __ + $__ << @__ + _ * $_)

  [S_content_type, S_application_json] >> self
  S_to_json >> {S_output => OUTPUT, S_smoosh => SMOOSH}
})
